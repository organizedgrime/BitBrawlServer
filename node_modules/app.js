// import web3 from 'web3';
// import contract from 'truffle-contract';
// import io from 'socket.io';
// const contract = require('truffle-contract');
// const io = require('socket.io');

// Import the contract JSON
// import bitbrawl_artifacts from '../build/contracts/BitBrawl.json'
// const bitbrawl_artifacts = require('../build/contracts/BitBrawl.json');



// Store all the accounts of the user and the active account, which is by default set to the first available account
var availAccounts;
var activeAccount;

var contractAddr;

var BitBrawl;

window.App = {
	web3Provider: null,

	init: function() {
		var self = this;

		BitBrawl.setProvider(window.web3.currentProvider);

		BitBrawl.deployed().then(instance => {
			var cAddr = instance.address;
			if (cAddr != 0 && cAddr != null) {
				contractAddr = cAddr;
			}
		});

		// Get the accounts, set the active account to the 1st account, and update cards
		web3.eth.getAccounts((err, accounts) => {
			if (err != null) { alert('Error getting accounts, check your wallet setup'); return; }
			if (accounts.length == 0) { alert('No accounts found!'); return; }

			availAccounts = accounts;
			activeAccount = accounts[0];

			self.refreshCards();
		});
	},

	refreshCards: function() {
		var self = this;

		var brawl;
		BitBrawl.deployed().then(instance => {
			brawl = instance;
			console.log(brawl.getPlayerCards(activeAccount));
		});
	},

	//*************************** REMOVE L8R ***************************
	// Queries the contract to create a new card for the active account
	// Obviously remove later, this is a debug function
	//******************************************************************
	createCard: function() {
		var self = this;

		var brawl;
		BitBrawl.deployed().then(instance => {
			brawl = instance;
			var params = brawl.createCard.getData(activeAccount, "Lil Clout", 0);
			var tx = {
				from: activeAccount,
				to: contractAddr,
				data: params
			};
			brawl.createCard.sendTransaction(tx, (err, res) => {
				if (err != null) {
					alert("Error sending transaction! Who knows why.");
					return;
				}
				console.log("Sent createCard() tx with id: " + res);
			});
		}).catch(err => {
			alert("Error doing something. Check the console");
			console.error(err);
		});
	}
};

function onLoad() {
	console.log("asdfasdfasdf");
 	var contract;
    $.getJSON('BitBrawl.json',{},function(data){
    	contract = data;
        console.log(contract);
        // Is there is an injected web3 instance}?
        if (typeof web3 !== 'undefined') {
            App.web3Provider = web3.currentProvider;
            web3 = new Web3(web3.currentProvider);
            console.log('oh!');
            BitBrawl = TruffleContract(contract);

        } else {
            // If no injected web3 instance is detected, fallback to Ganache.
            App.web3Provider = new web3.providers.HttpProvider('http://127.0.0.1:9545');
            web3 = new Web3(App.web3Provider);
        }
        App.init();
    });
};



